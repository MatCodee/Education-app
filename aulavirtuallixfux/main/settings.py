"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from pathlib import Path
import os
import environ


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

env = environ.Env()
environ.Env.read_env()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.getenv('DEBUG', 'False') == 'False')

ALLOWED_HOSTS = ['127.0.0.1', '.herokuapp.com']

PATH_PAGE = "http://127.0.0.1:8000"
#PATH_PAGE = "http://192.168.1.33:8000"

# Application definition

INSTALLED_APPS = [
    # desabilitar le manejo de archivos estaticos de heroku
    'whitenoise.runserver_nostatic',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework.authtoken',
    'rest_framework',
    'djoser',
    'corsheaders',
    'storages', 
    
    # notification
    'webpush',
    
    # apps
    'courses',
    'users_act',
    'exam',
    'comunication',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

REST_FRAMEWORK = {
   'DEFAULT_AUTHENTICATION_CLASSES': (
       'rest_framework.authentication.TokenAuthentication',
   ),
}


# add this block below MIDDLEWARE

CORS_ORIGIN_WHITELIST = (
    'http://localhost:3000',
    "http://192.168.1.33:8080",
    "http://192.168.43.243:8080",
    
    # este es el dominio del frontend
    "https://friendly-paletas-996e06.netlify.app",
    "https://www.lixfux.com",
)
# app email
# email: matytiyu2@gmail.com
# password app:  bptzamzyesllxbyn



# notification client:

WEBPUSH_SETTINGS = {
   "VAPID_PUBLIC_KEY": "BBONAKRtplxfZ9ahnZWj5MbNRnSoJrrVK2ldCBgNBm88fi0Mlb-gI5UPdM-t5ckCFrBrH0E2RB5xetpZqD2zR0U",
   "VAPID_PRIVATE_KEY": "r0XtIA5tv8D6qzrRYHSXKbEo2dhs5g5e9IoSFc791gQ",
   "VAPID_ADMIN_EMAIL": "matias.altamiranove@gmail.com"
}




'''
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_POST = 587
EMAIL_HOST_USER = 'matytiyu2@gmail.com'
EMAIL_HOST_PASSWORD = 'bptzamzyesllxbyn'
EMAIL_USE_TLS = True

DJOSER = {
    'LOGIN_FIELD': 'email',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'SET_USERNAME_RETYPE': True,
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_URL':'password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL':'email/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': True,
    'SERIALIZERS': {
        
    }
}
'''

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

import dj_database_url


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)




# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# Implementacion de los servicios de AWS


# Esta es la platilla de configuracion de almacenamiento de S3 en django
# manejo de directorios para buscer archivos estaticos
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'media')
]


# direccion global para guardar los archivos estaticos
STATIC_URL = '/static/'

# direccion gobal para guarda la informacion multimedia
MEDIA_URL = '/media/'

# Esta es el directorio para guardar los datos de staticos de toda la aplicacion
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Este es el direcotrio para guardar los datos de multimedia de la pliacion
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_cdn')


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# configuraciopn de heroku para archvos estaticos:
import django_on_heroku
django_on_heroku.settings(locals(),staticfiles=False)



# Configuracion de servicios de AWS S3




USE_S3 = (os.getenv('USE_S3', 'False') == 'True')

if USE_S3:
    ADMIN_MEDIA_PREFIX = 'staticfiles/admin/' 
    # aws settings
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}

    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    # s3 static settings
    AWS_LOCATION = 'staticfiles'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # s3 public media settings
    PUBLIC_MEDIA_LOCATION = 'media_cdn'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/' 
    DEFAULT_FILE_STORAGE = 'main.storage_backends.MediaStorage'  
else:
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]
    #STATIC_URL = '/staticfiles/'
    #STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    #MEDIA_URL = '/mediafiles/'
    #MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

#STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'))
